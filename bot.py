import logging
import json
import pandas as pd
import asyncio
import os
import requests # <-- –î–û–ë–ê–í–õ–ï–ù–û –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±–ª–∞—á–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from telegram.error import BadRequest

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø (—Ç–µ–ø–µ—Ä—å –±–µ—Ä–µ—Ç—Å—è –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è) ---
# –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –º—ã –Ω–∞—Å—Ç—Ä–æ–∏–º –ø—Ä—è–º–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –∞ –Ω–µ –≤ –∫–æ–¥–µ.
TOKEN = os.environ.get("TOKEN")
JSONBIN_API_KEY = os.environ.get("JSONBIN_API_KEY")
BIN_ID = os.environ.get("BIN_ID")

ADMIN_IDS = {775251841, 796639606, 721329781}

# --- –¢–ï–ö–°–¢ –ö–ù–û–ü–û–ö ---
BTN_START_REG = "‚ñ∂Ô∏è –í—ã–±—Ä–∞—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"
BTN_MY_MENTOR = "üë§ –ú–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫"
BTN_CHANGE_MENTOR = "üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"

# --- –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê ---
data_lock = asyncio.Lock()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞—Ö (–æ—Å—Ç–∞–µ—Ç—Å—è –≤ –∫–æ–¥–µ) ---
MENTORS_DATA = [
    # 1 –ø–æ—Ç–æ–∫
    {"id": 101, "name": "–î–∞—à–∞ Selena ¬´–†—É–±—Ü—ã¬ª", "limit": 13, "stream": 1},
    {"id": 102, "name": "–ê—Ä—Ç—É—Ä –ì–µ–º–ø–∏–∫ ¬´–†–∞–∑–±–æ—Ä –≤–∞—à–∏—Ö –±–∏–∑–Ω–µ—Å —Å–∏—Å—Ç–µ–º¬ª", "limit": 13, "stream": 1},
    {"id": 103, "name": "–û–ª—å–≥–∞ –ì–µ—Ä—Ü ¬´–°—Ç–∞—Ä—Ç–µ—Ä-–ø–∞–∫ –¥–ª—è –ª–µ–≥–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã¬ª", "limit": 13, "stream": 1},
    {"id": 104, "name": "–°–µ—Ä–≥–µ–π ¬´Tyler¬ª –ü–æ–ø–æ–≤ ¬´–ü–æ–±–æ–ª—Ç—É—à–∫–∏ —Å –¢–∞–π–ª–µ—Ä–æ–º¬ª", "limit": 13, "stream": 1},
    {"id": 105, "name": "–î–∏–º–∞ –ê—Ä–±—É–∑–æ–≤ ¬´–ü—Ä–æ–∫–æ–ª ¬´Daith¬ª¬ª", "limit": 13, "stream": 1},
    # 2 –ø–æ—Ç–æ–∫
    {"id": 201, "name": "–ê–ª–µ–∫—Å–µ–π ‚Äútushk4‚Äù –í—è–∑—å–º–∏–Ω ¬´–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –ø—Ä–æ–∫–æ–ª–æ–≤¬ª", "limit": 13, "stream": 2},
    {"id": 202, "name": "–ú–∞—Ä–≥–æ –ö—Ä–∞–º–µ—Ä ¬´–ñ–µ–Ω—Å–∫–∏–π –≥–µ–Ω–∏—Ç–∞–ª—å–Ω—ã–π –ø–∏—Ä—Å–∏–Ω–≥¬ª", "limit": 13, "stream": 2},
    {"id": 203, "name": "–ü–æ–ª–∏–Ω–∞ –ì—Ä–∏–Ω–µ–Ω–∫–æ ¬´–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥, –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ¬ª", "limit": 13, "stream": 2},
    {"id": 204, "name": "–ê—Ä—Ç–µ–º –ü–∞—Ä—à–∏–Ω & –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ –°–µ—Ä–¥—é–∫–æ–≤–∞ ¬´–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏¬ª", "limit": 13, "stream": 2},
    {"id": 205, "name": "–ù–∞—Å—Ç—è –ñ–∞–±—É—Ä–∞ ¬´–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã —Ç–æ–ø—ã –Ω–µ —Ä–∞—Å–∫—Ä—É—á–∏–≤–∞–ª–∏—Å—å¬ª", "limit": 13, "stream": 2},
]

# --- –ò–ó–ú–ï–ù–ï–ù–û: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ –æ–±–ª–∞–∫–æ JSONbin.io ---

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSONbin.io."""
    headers = {'X-Master-Key': JSONBIN_API_KEY}
    default_data = {"mentors": MENTORS_DATA, "mentees": {}}
    
    if not BIN_ID or not JSONBIN_API_KEY:
        logger.error("JSONbin API Key or BIN_ID not configured!")
        return default_data

    try:
        req = requests.get(f'https://api.jsonbin.io/v3/b/{BIN_ID}/latest', headers=headers, timeout=10)
        req.raise_for_status()
        data = req.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ–±–ª–∞–∫–µ –Ω–µ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        if 'record' in data:
             data = data['record']

        if 'mentors' not in data or not data.get('mentors'):
            data['mentors'] = MENTORS_DATA
        if 'mentees' not in data:
            data['mentees'] = {}
        return data
    except Exception as e:
        logger.error(f"Failed to load data from JSONbin, using default. Error: {e}")
        return default_data

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSONbin.io."""
    headers = {
        'Content-Type': 'application/json',
        'X-Master-Key': JSONBIN_API_KEY
    }
    if not BIN_ID or not JSONBIN_API_KEY:
        logger.error("Cannot save data, JSONbin API Key or BIN_ID not configured!")
        return False

    try:
        req = requests.put(f'https://api.jsonbin.io/v3/b/{BIN_ID}', json=data, headers=headers, timeout=10)
        req.raise_for_status()
        return True
    except Exception as e:
        logger.error(f"Failed to save data to JSONbin. Error: {e}")
        return False

# --- –í–ï–°–¨ –û–°–¢–ê–õ–¨–ù–û–ô –ö–û–î –ë–û–¢–ê –û–°–¢–ê–ï–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
# (–∑–¥–µ—Å—å –∏–¥–µ—Ç –≤–µ—Å—å –≤–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: start, handle_start_registration –∏ —Ç.–¥.)
# –Ø —Å–∫–æ–ø–∏—Ä—É—é –µ–≥–æ –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã.

def get_main_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = load_data()
    if str(user_id) in data["mentees"] and data["mentees"][str(user_id)].get("mentor_id"):
        keyboard = [[BTN_MY_MENTOR, BTN_CHANGE_MENTOR]]
    else:
        keyboard = [[BTN_START_REG]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    user = update.effective_user
    reply_markup = get_main_keyboard(user.id)
    welcome_text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        "–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≥–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∂–∏–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞. "
        "–í–º–µ—Å—Ç–æ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ª–µ–∫—Ü–∏–π ‚Äî –±–µ—Å–µ–¥–∞ –≤ –º–∏–Ω–∏-–≥—Ä—É–ø–ø–µ –¥–æ 13 —á–µ–ª–æ–≤–µ–∫. –í—ã —Å–∞–º–∏ –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–µ–±–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.\n\n"
        "–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ—Ç 5 –æ–∫—Ç—è–±—Ä—è, –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≤ –¥–≤–∞ –ø–æ—Ç–æ–∫–∞:\n"
        "‚ñ´Ô∏è –ü–µ—Ä–≤—ã–π ‚Äî —Å 12:00 –¥–æ 13:20\n"
        "‚ñ´Ô∏è –í—Ç–æ—Ä–æ–π ‚Äî —Å 14:40 –¥–æ 16:00\n"
        "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ—Å—Ç–æ–∏—Ç—Å—è –≤ –∑–∞–ª–µ ¬´–ü–∞–Ω–æ—Ä–∞–º–∞¬ª.\n\n"
        "–ú–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã, –ø–æ—ç—Ç–æ–º—É –≤–∞–∂–Ω–æ –∑–∞—Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è. "
        "–§–æ—Ä–º–∞—Ç –Ω–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç —Å—Ç—Ä–æ–≥–æ–≥–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–µ–º—É —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º."
    )
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
    )

async def handle_start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    async with data_lock:
        data = load_data()
        mentee_info = data["mentees"].get(user_id)
        if mentee_info and mentee_info.get("mentor_id"):
            await update.message.reply_text(
                "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.",
                reply_markup=get_main_keyboard(update.effective_user.id),
            )
            return

        if mentee_info and mentee_info.get("name"):
            await show_mentor_selection(update, context)
        else:
            context.user_data['awaiting_name'] = True
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–∏ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é.",
                reply_markup=ReplyKeyboardRemove(),
            )

async def handle_my_mentor_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    mentee_info = data["mentees"].get(user_id)

    if not mentee_info or not mentee_info.get("mentor_id"):
        await update.message.reply_text(
            "–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞. –ù–∞–∂–º–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=get_main_keyboard(update.effective_user.id),
        )
        return

    mentor_id = mentee_info.get("mentor_id")
    mentor = next((m for m in data["mentors"] if m["id"] == mentor_id), None)

    if not mentor:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –í–∞—à –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ.")
        return

    stream_times = {1: "12:00 - 13:20", 2: "14:40 - 16:00"}
    stream_time = stream_times.get(mentor.get("stream", 0), "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")

    await update.message.reply_text(
        f"–í–∞—à –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫:\n\nüë§ **{mentor['name']}**\n‚è∞ **–ü–æ—Ç–æ–∫:** {mentor['stream']} ({stream_time})",
        reply_markup=get_main_keyboard(update.effective_user.id),
        parse_mode='Markdown'
    )

async def handle_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_name'):
        await update.message.reply_text(
            "–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.",
            reply_markup=get_main_keyboard(update.effective_user.id),
        )
        return

    user_name = update.message.text.strip()
    user_id = str(update.effective_user.id)

    async with data_lock:
        data = load_data()
        if user_id in data["mentees"]:
            data["mentees"][user_id]["name"] = user_name
        else:
            data["mentees"][user_id] = {"name": user_name, "mentor_id": None, "question": None}
        save_data(data)

    context.user_data['awaiting_name'] = False
    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ, {user_name}!")
    await show_mentor_selection(update, context)

async def show_mentor_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, is_change: bool = False):
    target_message = update.callback_query.message if update.callback_query else update.message
    query = update.callback_query
    
    data = load_data()

    mentee_counts = {m['id']: 0 for m in data['mentors']}
    for mentee in data["mentees"].values():
        mentor_id = mentee.get("mentor_id")
        if mentor_id in mentee_counts:
            mentee_counts[mentor_id] += 1

    stream_times = {1: "12:00 - 13:20", 2: "14:40 - 16:00"}

    message_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ (–∫–Ω–æ–ø–∫–∏ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –Ω–∏–∂–µ):\n"
    keyboard_rows = []
    buttons_in_row = []
    sequential_counter = 1

    for stream_num in sorted(stream_times.keys()):
        message_text += f"\n--- **–ü–æ—Ç–æ–∫ {stream_num} ({stream_times[stream_num]})** ---\n"
        mentors_in_stream = [m for m in data["mentors"] if m["stream"] == stream_num]
        
        for mentor in mentors_in_stream:
            free_slots = mentor["limit"] - mentee_counts.get(mentor["id"], 0)
            
            buttons_in_row.append(InlineKeyboardButton(str(sequential_counter), callback_data=f"select_mentor_{mentor['id']}"))
            
            if free_slots > 0:
                message_text += f"\n**{sequential_counter}. üë§ {mentor['name']}**\n_(—Å–≤–æ–±–æ–¥–Ω–æ: {free_slots})_\n"
            else:
                message_text += f"\n~**{sequential_counter}. üë§ {mentor['name']}**~\n_(–º–µ—Å—Ç –Ω–µ—Ç)_\n"

            if len(buttons_in_row) == 5:
                keyboard_rows.append(buttons_in_row)
                buttons_in_row = []
            
            sequential_counter += 1

    if buttons_in_row:
        keyboard_rows.append(buttons_in_row)

    if is_change:
        keyboard_rows.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="change_mentor_cancel")])

    reply_markup = InlineKeyboardMarkup(keyboard_rows)

    try:
        if query:
            await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await target_message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    except BadRequest as e:
        if "Message is not modified" in str(e):
            pass
        else:
            raise e

async def ask_question_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE, mentor: dict):
    user_id = str(update.effective_user.id)
    context.user_data['awaiting_question'] = True
    
    stream_times = {1: "12:00 - 13:20", 2: "14:40 - 16:00"}
    stream_time = stream_times.get(mentor.get("stream", 0), "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")

    confirmation_text = (
        f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n\n"
        f"üë§ **–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:** {mentor['name']}\n"
        f"üóì **–ü–æ—Ç–æ–∫:** {mentor['stream']} ({stream_time})\n\n"
        "–•–æ—Ç–∏—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é."
    )

    if update.callback_query:
        await update.callback_query.edit_message_text("–í—ã–±–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")

    await context.bot.send_message(
        chat_id=user_id,
        text=confirmation_text,
        reply_markup=get_main_keyboard(int(user_id)),
        parse_mode='Markdown'
    )

async def notify_admins_of_question(context: ContextTypes.DEFAULT_TYPE, mentee_name: str, mentor_name: str, question: str):
    message = (
        f"üîî –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞!\n\n"
        f"–û—Ç: {mentee_name}\n"
        f"–ö–æ–º—É: {mentor_name}\n"
        f"–í–æ–ø—Ä–æ—Å: {question}"
    )
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text=message, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def handle_question_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_question'):
        await update.message.reply_text(
            "–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.",
            reply_markup=get_main_keyboard(update.effective_user.id),
        )
        return

    question_text = update.message.text.strip()
    user_id = str(update.effective_user.id)
    mentee_name = "N/A"
    mentor_name = "–ù–µ –≤—ã–±—Ä–∞–Ω"

    async with data_lock:
        data = load_data()
        if user_id in data["mentees"]:
            data["mentees"][user_id]["question"] = question_text
            save_data(data)
            
            mentee_name = data["mentees"][user_id].get("name", "N/A")
            mentor_id = data["mentees"][user_id].get("mentor_id")
            mentor = next((m for m in data["mentors"] if m["id"] == mentor_id), None)
            if mentor:
                mentor_name = mentor["name"]
        else:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.")
            return

    context.user_data['awaiting_question'] = False 
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ, –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ù–∞—Å—Ç–∞–≤–Ω–∏–∫ —Å–º–æ–∂–µ—Ç –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∏–º –∑–∞—Ä–∞–Ω–µ–µ.",
        reply_markup=get_main_keyboard(int(user_id))
    )

    await notify_admins_of_question(context, mentee_name, mentor_name, question_text)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    
    if query.data == "change_mentor_cancel":
        await query.edit_message_text("–°–º–µ–Ω–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await query.message.reply_text(
            "–í—ã –æ—Å—Ç–∞—ë—Ç–µ—Å—å —Å –≤–∞—à–∏–º —Ç–µ–∫—É—â–∏–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º.",
            reply_markup=get_main_keyboard(int(user_id)),
        )
        return

    if query.data.startswith("select_mentor_"):
        mentor_id_to_select = int(query.data.split("_")[2])
        
        async with data_lock:
            data = load_data()
            mentee_info = data["mentees"].get(user_id)
            if not mentee_info:
                await query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –í–∞—à—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.", show_alert=True)
                return
            
            if mentee_info.get("mentor_id") == mentor_id_to_select:
                await query.answer("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –∫ —ç—Ç–æ–º—É –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É.", show_alert=True)
                return

            mentee_counts = {m['id']: 0 for m in data['mentors']}
            for mentee in data["mentees"].values():
                m_id = mentee.get("mentor_id")
                if m_id and m_id in mentee_counts:
                    mentee_counts[m_id] += 1

            mentor_to_select = next((m for m in data["mentors"] if m["id"] == mentor_id_to_select), None)
            if not mentor_to_select:
                await query.answer("–û—à–∏–±–∫–∞: —ç—Ç–æ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
                return
            
            if mentee_counts.get(mentor_id_to_select, 0) >= mentor_to_select["limit"]:
                await query.answer("–£ —ç—Ç–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –º–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ.", show_alert=True)
                return
            
            data["mentees"][user_id]["mentor_id"] = mentor_id_to_select
            data["mentees"][user_id]["question"] = None
            save_data(data)
        
        await ask_question_prompt(update, context, mentor_to_select)

async def export_to_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    async with data_lock:
        data = load_data()

    if not data["mentees"]:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return
        
    mentors_map = {mentor['id']: mentor for mentor in data['mentors']}
    report_data = []
    for mentee_id, mentee_info in data["mentees"].items():
        mentor_id = mentee_info.get("mentor_id")
        mentor = mentors_map.get(mentor_id)
        if mentor:
            mentor_name = mentor["name"]
            stream_info = f"–ü–æ—Ç–æ–∫ {mentor['stream']}"
        else:
            mentor_name = "–ù–µ –≤—ã–±—Ä–∞–Ω"
            stream_info = "N/A"

        report_data.append({
            "–ò–º—è –£—á–∞—Å—Ç–Ω–∏–∫–∞": mentee_info.get("name", "N/A"),
            "Telegram ID": mentee_id,
            "–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫": mentor_name,
            "–ü–æ—Ç–æ–∫": stream_info,
            "–ó–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å": mentee_info.get("question", "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞"),
        })

    df = pd.DataFrame(report_data)
    file_path = "mentorship_report.xlsx"
    df.to_excel(file_path, index=False, engine='openpyxl')

    await update.message.reply_text("–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
    await context.bot.send_document(chat_id=update.effective_chat.id, document=open(file_path, 'rb'))

async def reset_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    async with data_lock:
        data = load_data()
        if user_id in data["mentees"]:
            del data["mentees"][user_id]
            save_data(data)
            refreshed_keyboard = get_main_keyboard(int(user_id))
        else:
            await update.message.reply_text("–í—ã –µ—â–µ –Ω–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

    await update.message.reply_text(
        "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.",
        reply_markup=refreshed_keyboard,
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    if not TOKEN:
        logger.critical("TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("reset", reset_user))
    application.add_handler(CommandHandler("export", export_to_excel))

    application.add_handler(MessageHandler(filters.Regex(f"^{BTN_START_REG}$"), handle_start_registration))
    application.add_handler(MessageHandler(filters.Regex(f"^{BTN_MY_MENTOR}$"), handle_my_mentor_info))
    application.add_handler(MessageHandler(
        filters.Regex(f"^{BTN_CHANGE_MENTOR}$"),
        lambda u, c: show_mentor_selection(u, c, is_change=True)
    ))

    application.add_handler(CallbackQueryHandler(button_callback))

    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.UpdateType.MESSAGE,
        lambda u, c: handle_question_input(u, c) if c.user_data.get('awaiting_question') else handle_name_input(u, c)
    ))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()